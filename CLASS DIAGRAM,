Berikut ini adalah penjelasan lengkap dari **Class Diagram**, **CRC Card**, **Single Responsibility Principle (SRP)**, dan **Program Java** berdasarkan struktur yang kamu inginkan.

### 1. **Class Diagram**

Di bawah ini adalah gambaran umum **Class Diagram** untuk implementasi yang sudah kamu buat. Ini akan menggambarkan hubungan antar kelas, atribut, dan metode.

```plaintext
+-----------------+         +-------------------+         +------------------+
|    Transfer    |<-------->|      Pengguna     |         |      THP         |
|-----------------|         |-------------------|         |------------------|
| + mentransfer() |         | - nama            |         | - saldoTHP       |
|                 |         | - noRek           |         |                  |
|                 |         | - nominal         |         |                  |
|                 |         | + mentransfer()   |         | + menerima()     |
|                 |         | + getNama()       |         | + cetakPermintaan()|
|                 |         | + getNoRek()      |         | + cetakNotifikasi()|
|                 |         | + getNominal()    |         | + getSaldo()     |
|                 |         | + setNominal()    |         |                  |
+-----------------+         +-------------------+         +------------------+

```

* **Transfer Interface** adalah interface dengan method `mentransfer()`.
* **Pengguna Class** adalah implementasi dari interface `Transfer` yang memiliki atribut `nama`, `noRek`, dan `nominal`, serta implementasi method `mentransfer()`.
* **THP Class** adalah implementasi dari `Transfer` yang memiliki atribut `saldoTHP`, serta metode `menerima()`, `cetakPermintaan()`, `cetakNotifikasi()`, dan `getSaldo()`.

### 2. **CRC Card** (Class-Responsibility-Collaboration)

#### a. **Pengguna Class**

* **Class**: Pengguna
* **Responsibilities**:

  * Menyimpan informasi pengguna (nama, noRek, nominal).
  * Melakukan transfer ke akun THP.
  * Memvalidasi jika saldo cukup untuk transfer.
* **Collaborators**: THP (untuk menerima dana)

#### b. **THP Class**

* **Class**: THP
* **Responsibilities**:

  * Menerima dana yang ditransfer.
  * Mencetak permintaan transfer dan notifikasi.
  * Menyimpan saldo yang diterima.
* **Collaborators**: Pengguna (untuk menerima dana)

#### c. **Transfer Interface**

* **Class**: Transfer
* **Responsibilities**:

  * Menyediakan deklarasi method `mentransfer()`.
* **Collaborators**: Pengguna, THP (sebagai implementasi)

### 3. **Single Responsibility Principle (SRP)**

Pada prinsip SRP, setiap kelas hanya memiliki satu tanggung jawab atau alasan untuk berubah.

* **Pengguna Class**: Bertanggung jawab hanya untuk **proses transfer** dari pengguna ke THP, memastikan saldo cukup, dan melakukan update saldo pada pengguna.
* **THP Class**: Bertanggung jawab hanya untuk **menerima dana** dan mencetak informasi terkait transfer yang diterima.
* **Transfer Interface**: Bertanggung jawab hanya untuk **deklarasi metode `mentransfer()`** yang harus diimplementasikan oleh kelas yang relevan (Pengguna dan THP).

### 4. **Program Java**

Berikut adalah program Java lengkap sesuai dengan desain yang telah dijelaskan:

#### a. **Transfer Interface**

```java
public interface Transfer {
    void mentransfer(Pengguna dari, THP ke, double jumlah);
}
```

#### b. **Pengguna Class**

```java
public class Pengguna implements Transfer {
    private String nama;
    private String noRek;
    private double nominal;

    public Pengguna(String nama, String noRek, double nominal) {
        this.nama = nama;
        this.noRek = noRek;
        this.nominal = nominal;
    }

    public String getNama() {
        return nama;
    }

    public String getNoRek() {
        return noRek;
    }

    public double getNominal() {
        return nominal;
    }

    public void setNominal(double nominal) {
        this.nominal = nominal;
    }

    @Override
    public void mentransfer(Pengguna dari, THP ke, double jumlah) {
        if (dari.nominal >= jumlah) {
            dari.nominal -= jumlah;
            ke.menerima(jumlah);
            ke.cetakPermintaan(dari, jumlah);
            ke.cetakNotifikasi(dari, jumlah);
        } else {
            System.out.println("Saldo tidak cukup untuk transfer.");
        }
    }
}
```

#### c. **THP Class**

```java
public class THP implements Transfer {
    private double saldoTHP = 0;

    public void menerima(double jumlah) {
        saldoTHP += jumlah;
    }

    public void cetakPermintaan(Pengguna pengirim, double jumlah) {
        System.out.println("Permintaan transfer dari: " + pengirim.getNama());
        System.out.println("Jumlah: " + jumlah);
    }

    public void cetakNotifikasi(Pengguna pengirim, double jumlah) {
        System.out.println("Notifikasi: " + jumlah + " berhasil diterima dari " + pengirim.getNama());
    }

    @Override
    public void mentransfer(Pengguna dari, THP ke, double jumlah) {
        // Implementasi tidak diperlukan, kecuali jika THP juga bisa mentransfer
    }

    public double getSaldo() {
        return saldoTHP;
    }
}
```

#### d. **Main Class**

```java
public class Main {
    public static void main(String[] args) {
        Pengguna user1 = new Pengguna("Andi", "0012345678", 500_000);
        THP thpReceiver = new THP();

        System.out.println("Saldo awal Andi: " + user1.getNominal());
        System.out.println("Saldo awal THP: " + thpReceiver.getSaldo());

        // Transfer sebesar 200_000
        user1.mentransfer(user1, thpReceiver, 200_000);

        System.out.println("Saldo akhir Andi: " + user1.getNominal());
        System.out.println("Saldo akhir THP: " + thpReceiver.getSaldo());
    }
}
```

### 5. **Output**

Berikut adalah contoh output yang dihasilkan saat menjalankan program di atas:

```plaintext
Saldo awal Andi: 500000.0
Saldo awal THP: 0.0
Permintaan transfer dari: Andi
Jumlah: 200000.0
Notifikasi: 200000.0 berhasil diterima dari Andi
Saldo akhir Andi: 300000.0
Saldo akhir THP: 200000.0
```

---

Jika kamu ingin versi lain seperti menggunakan **GUI**, **Scanner input**, atau tambahan lainnya seperti **log** atau **error handling**, jangan ragu untuk bilang ya!
