Berdasarkan class diagram yang kamu gambar, sistem ini menggambarkan skenario transfer dana antara pengguna, menggunakan antarmuka Transfer, dengan dua class utama yaitu Pengguna dan THP. Mari kita uraikan menjadi tiga bagian sesuai permintaan:

â¸»

âœ… 1. CRC Card (Class-Responsibility-Collaboration)

ðŸ“„ Class: Pengguna/User
	â€¢	Responsibilities:
	â€¢	Menyimpan data user (nama, no rek, nominal)
	â€¢	Melakukan transfer dana
	â€¢	Collaborators:
	â€¢	Interface Transfer
	â€¢	Class THP

â¸»

ðŸ“„ Interface: Transfer
	â€¢	Responsibilities:
	â€¢	Menyediakan kontrak untuk method mentransfer
	â€¢	Collaborators:
	â€¢	Diimplementasi oleh Pengguna dan THP

â¸»

ðŸ“„ Class: THP
	â€¢	Responsibilities:
	â€¢	Cetak permintaan
	â€¢	Cetak notifikasi
	â€¢	Menerima transfer
	â€¢	Implementasi method mentransfer
	â€¢	Collaborators:
	â€¢	Pengguna (sumber data transfer)

â¸»

âœ… 2. SRP (Single Responsibility Principle)

Setiap class memiliki satu tanggung jawab:
	â€¢	âœ… Pengguna: hanya bertugas menyimpan data dan melakukan transfer.
	â€¢	âœ… Transfer (interface): bertanggung jawab memberikan kontrak untuk transfer.
	â€¢	âœ… THP: bertugas memproses dan mencetak hasil transfer (logika penerima transfer).

Jadi semua class telah mengikuti prinsip SRP.

â¸»

âœ… 3. Class Diagram (Versi Rapi)

<<interface>> Transfer
+ mentransfer()

Class Pengguna
- nama: String
- noRek: String
- nominal: double
+ mentransfer(): void
--------------------------
<<implements>> Transfer

Class THP
+ cetakPermintaan(): void
+ cetakNotifikasi(): void
+ menerima(): void
+ mentransfer(): void
--------------------------
<<implements>> Transfer

Class Main
+ main(): void

Relasi:
	â€¢	Pengguna dan THP mengimplementasikan interface Transfer
	â€¢	Main akan menggunakan class Pengguna dan THP untuk simulasi transfer

â¸»
Berikut adalah implementasi Java lengkap berdasarkan class diagram kamu yang terdiri dari:
	â€¢	Interface Transfer
	â€¢	Class Pengguna
	â€¢	Class THP
	â€¢	Class Main

â¸»

âœ… 1. Interface: Transfer.java

public interface Transfer {
    void mentransfer(Pengguna dari, THP ke, double jumlah);
}


â¸»

âœ… 2. Class: Pengguna.java

public class Pengguna implements Transfer {
    private String nama;
    private String noRek;
    private double nominal;

    public Pengguna(String nama, String noRek, double nominal) {
        this.nama = nama;
        this.noRek = noRek;
        this.nominal = nominal;
    }

    public String getNama() {
        return nama;
    }

    public String getNoRek() {
        return noRek;
    }

    public double getNominal() {
        return nominal;
    }

    public void setNominal(double nominal) {
        this.nominal = nominal;
    }

    @Override
    public void mentransfer(Pengguna dari, THP ke, double jumlah) {
        if (dari.nominal >= jumlah) {
            dari.nominal -= jumlah;
            ke.menerima(jumlah);
            ke.cetakPermintaan(dari, jumlah);
            ke.cetakNotifikasi(dari, jumlah);
        } else {
            System.out.println("Saldo tidak cukup untuk transfer.");
        }
    }
}


â¸»

âœ… 3. Class: THP.java

public class THP implements Transfer {
    private double saldoTHP = 0;

    public void menerima(double jumlah) {
        saldoTHP += jumlah;
    }

    public void cetakPermintaan(Pengguna pengirim, double jumlah) {
        System.out.println("Permintaan transfer dari: " + pengirim.getNama());
        System.out.println("Jumlah: " + jumlah);
    }

    public void cetakNotifikasi(Pengguna pengirim, double jumlah) {
        System.out.println("Notifikasi: " + jumlah + " berhasil diterima dari " + pengirim.getNama());
    }

    @Override
    public void mentransfer(Pengguna dari, THP ke, double jumlah) {
        // Implementasi tidak diperlukan, kecuali jika THP juga bisa mentransfer
    }

    public double getSaldo() {
        return saldoTHP;
    }
}


â¸»

âœ… 4. Class: Main.java

public class Main {
    public static void main(String[] args) {
        Pengguna user1 = new Pengguna("Andi", "0012345678", 500_000);
        THP thpReceiver = new THP();

        System.out.println("Saldo awal Andi: " + user1.getNominal());
        System.out.println("Saldo awal THP: " + thpReceiver.getSaldo());

        // Transfer sebesar 200_000
        user1.mentransfer(user1, thpReceiver, 200_000);

        System.out.println("Saldo akhir Andi: " + user1.getNominal());
        System.out.println("Saldo akhir THP: " + thpReceiver.getSaldo());
    }
}


â¸»

âœ… Output Contoh:

Saldo awal Andi: 500000.0
Saldo awal THP: 0.0
Permintaan transfer dari: Andi
Jumlah: 200000.0
Notifikasi: 200000.0 berhasil diterima dari Andi
Saldo akhir Andi: 300000.0
Saldo akhir THP: 200000.0


â¸»

Kalau kamu ingin versi lain seperti GUI, Scanner input, atau tambahan seperti log, tinggal bilang ya!
Kalau kamu ingin, aku bisa bantu buatkan kode Java dari class diagram ini atau versi UML digital-nya. Mau dilanjutkan?